"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _i18n = require("@wordpress/i18n");
var _lodash = require("lodash");
var _assessment = _interopRequireDefault(require("../assessment"));
var _AssessmentResult = _interopRequireDefault(require("../../../values/AssessmentResult"));
var _helpers = require("../../../helpers");
var _unifyWhitespace = require("../../../languageProcessing/helpers/sanitize/unifyWhitespace");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Represents the assessment that checks whether a text has a title.
 */
class TextTitleAssessment extends _assessment.default {
  /**
   * Constructs a text title assessment.
   *
   * @param {object} config The config to use for the assessment.
   *
   * @returns {void}
   */
  constructor(config = {}) {
    super();
    const defaultConfig = {
      scores: {
        good: 9,
        bad: -10000
      },
      urlTitle: (0, _helpers.createAnchorOpeningTag)("https://yoa.st/4nh"),
      urlCallToAction: (0, _helpers.createAnchorOpeningTag)("https://yoa.st/4ni")
    };
    this.identifier = "textTitleAssessment";
    this._config = (0, _lodash.merge)(defaultConfig, config);
  }

  /**
   * Checks whether the paper has a text title.
   *
   * @param {Paper} 	paper		The paper to use for the assessment.
   *
   * @returns {boolean}	 Whether the paper has a text title.
   */
  getTextTitle(paper) {
    let textTitle = paper.getTextTitle();
    textTitle = (0, _unifyWhitespace.unifyAllSpaces)(textTitle);
    textTitle = textTitle.trim();
    return textTitle.length > 0;
  }

  /**
   * Gets the title from the Paper and based on this returns an assessment result with score.
   *
   * @param {Paper}      paper      The paper to use for the assessment.
   *
   * @returns {AssessmentResult} The assessment result.
   */
  getResult(paper) {
    const textTitleData = this.getTextTitle(paper);
    const calculatedResult = this.calculateResult(textTitleData);
    const assessmentResult = new _AssessmentResult.default();
    assessmentResult.setScore(calculatedResult.score);
    assessmentResult.setText(calculatedResult.resultText);
    return assessmentResult;
  }

  /**
   * Returns the result object based on whether the text has a title or not.
   *
   * @param {boolean} textTitleData Whether the text has a title.
   *
   * @returns {{resultText: string, score}} Result object with score and text.
   */
  calculateResult(textTitleData) {
    // GOOD result when the text has a title.
    if (textTitleData) {
      return {
        score: this._config.scores.good,
        resultText: (0, _i18n.sprintf)( /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag. */
        (0, _i18n.__)("%1$sTitle%2$s: Your page has a title. Well done!", "wordpress-seo-premium"), this._config.urlTitle, "</a>")
      };
    }

    // BAD if the text is missing a title.
    return {
      score: this._config.scores.bad,
      resultText: (0, _i18n.sprintf)(
      /**
       * translators:
       * %1$s and %2$s expands to a link on yoast.com, %3$s expands to the anchor end tag.
       */
      (0, _i18n.__)("%1$sTitle%3$s: Your page does not have a title yet. %2$sAdd one%3$s!", "wordpress-seo-premium"), this._config.urlTitle, this._config.urlCallToAction, "</a>")
    };
  }
}
exports.default = TextTitleAssessment;
//# sourceMappingURL=TextTitleAssessment.js.map