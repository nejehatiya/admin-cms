"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _feedbackStrings = require("./feedbackStrings");
var _scores = require("./scores");
var _includesConsecutiveWords = require("../helpers/includesConsecutiveWords");
var _notInclusiveWhenStandalone = _interopRequireDefault(require("../helpers/notInclusiveWhenStandalone"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const appearanceAssessments = [{
  identifier: "albinos",
  nonInclusivePhrases: ["albinos"],
  inclusiveAlternatives: "<i>people with albinism, albino people</i>",
  score: _scores.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmfulUnless
}, {
  identifier: "anAlbino",
  nonInclusivePhrases: ["an albino"],
  inclusiveAlternatives: "<i>person with albinism, albino person</i>",
  score: _scores.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmfulUnless,
  rule: (words, nonInclusivePhrase) => {
    return (0, _includesConsecutiveWords.includesConsecutiveWords)(words, nonInclusivePhrase).filter((0, _notInclusiveWhenStandalone.default)(words, nonInclusivePhrase));
  }
}, {
  identifier: "obese",
  nonInclusivePhrases: ["obese", "overweight"],
  inclusiveAlternatives: "<i>has a higher weight, " + "higher-weight person, person in higher weight body, heavier person</i>",
  score: _scores.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [_feedbackStrings.potentiallyHarmfulUnless, _feedbackStrings.preferredDescriptorIfKnown].join(" ")
}, {
  identifier: "obesitySingular",
  nonInclusivePhrases: ["person with obesity", "fat person"],
  inclusiveAlternatives: "<i>person who has a higher weight, " + "higher-weight person, person in higher weight body, heavier person</i>",
  score: _scores.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [_feedbackStrings.potentiallyHarmfulUnless, _feedbackStrings.preferredDescriptorIfKnown].join(" ")
}, {
  identifier: "obesityPlural",
  nonInclusivePhrases: ["people with obesity", "fat people"],
  inclusiveAlternatives: "<i>people who have a higher weight, " + "higher-weight people, people in higher weight bodies, heavier people</i>",
  score: _scores.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [_feedbackStrings.potentiallyHarmfulUnless].join(" ")
}, {
  identifier: "verticallyChallenged",
  nonInclusivePhrases: ["vertically challenged"],
  inclusiveAlternatives: "<i>little person, has short stature, someone with dwarfism</i>",
  score: _scores.SCORES.NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmful
}, {
  identifier: "midget",
  nonInclusivePhrases: ["midget"],
  inclusiveAlternatives: "<i>little person, has short stature, someone with dwarfism</i>",
  score: _scores.SCORES.NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmful
}, {
  identifier: "midgets",
  nonInclusivePhrases: ["midgets"],
  inclusiveAlternatives: "<i>little people, have short stature, people with dwarfism</i>",
  score: _scores.SCORES.NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmful
}, {
  identifier: "harelip",
  nonInclusivePhrases: ["harelip"],
  inclusiveAlternatives: "<i>cleft lip, cleft palate</i>",
  score: _scores.SCORES.NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmful
}];
appearanceAssessments.forEach(assessment => {
  assessment.category = "appearance";
  assessment.learnMoreUrl = "https://yoa.st/inclusive-language-appearance";
});
var _default = exports.default = appearanceAssessments;
//# sourceMappingURL=appearanceAssessments.js.map