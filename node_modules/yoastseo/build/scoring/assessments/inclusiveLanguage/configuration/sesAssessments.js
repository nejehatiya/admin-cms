"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _feedbackStrings = require("./feedbackStrings");
var _scores = require("./scores");
var _includesConsecutiveWords = require("../helpers/includesConsecutiveWords");
var _notInclusiveWhenStandalone = _interopRequireDefault(require("../helpers/notInclusiveWhenStandalone"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const sesAssessments = [{
  identifier: "illegalImmigrant",
  nonInclusivePhrases: ["illegal immigrant", "illegal alien"],
  inclusiveAlternatives: "<i>undocumented person, person without papers, immigrant without papers</i>",
  score: _scores.SCORES.NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmful
}, {
  identifier: "illegalImmigrants",
  nonInclusivePhrases: ["illegal immigrants", "illegal aliens"],
  inclusiveAlternatives: "<i>undocumented people, people without papers, immigrants without papers</i>",
  score: _scores.SCORES.NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmful
}, {
  identifier: "povertyStricken",
  nonInclusivePhrases: ["poverty stricken"],
  inclusiveAlternatives: "<i>people whose income is below the poverty threshold, people with low-income</i>",
  score: _scores.SCORES.NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmful
}, {
  identifier: "welfareReliant",
  nonInclusivePhrases: ["welfare reliant"],
  inclusiveAlternatives: "<i>receiving welfare</i>",
  score: _scores.SCORES.NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmful
}, {
  identifier: "prostitute",
  nonInclusivePhrases: ["prostitute"],
  inclusiveAlternatives: "<i>sex worker</i>",
  score: _scores.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmfulUnless
}, {
  identifier: "prostitutes",
  nonInclusivePhrases: ["prostitutes"],
  inclusiveAlternatives: "<i>sex workers</i>",
  score: _scores.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmfulUnless
}, {
  identifier: "ex-con",
  nonInclusivePhrases: ["ex-con"],
  inclusiveAlternatives: "<i>person who has had felony convictions, person who has been incarcerated</i>",
  score: _scores.SCORES.NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmful
}, {
  identifier: "ex-cons",
  nonInclusivePhrases: ["ex-cons"],
  inclusiveAlternatives: "<i>people who have had felony convictions, people who have been incarcerated</i>",
  score: _scores.SCORES.NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmful
}, {
  identifier: "felon",
  nonInclusivePhrases: ["felon"],
  inclusiveAlternatives: "<i>person with felony convictions, person who has been incarcerated</i>",
  score: _scores.SCORES.NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmful
}, {
  identifier: "felons",
  nonInclusivePhrases: ["felons"],
  inclusiveAlternatives: "<i>people with felony convictions, people who have been incarcerated</i>",
  score: _scores.SCORES.NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmful
}, {
  identifier: "ex-offender",
  nonInclusivePhrases: ["ex-offender"],
  inclusiveAlternatives: "<i>formerly incarcerated person</i>",
  score: _scores.SCORES.NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmful
}, {
  identifier: "ex-offenders",
  nonInclusivePhrases: ["ex-offenders"],
  inclusiveAlternatives: "<i>formerly incarcerated people</i>",
  score: _scores.SCORES.NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmful
}, {
  identifier: "theHomeless",
  nonInclusivePhrases: ["the homeless"],
  inclusiveAlternatives: "<i>people experiencing homelessness</i>",
  score: _scores.SCORES.NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmful,
  rule: (words, nonInclusivePhrase) => {
    return (0, _includesConsecutiveWords.includesConsecutiveWords)(words, nonInclusivePhrase).filter((0, _notInclusiveWhenStandalone.default)(words, nonInclusivePhrase));
  }
}, {
  identifier: "theUndocumented",
  nonInclusivePhrases: ["the undocumented"],
  inclusiveAlternatives: "<i>people who are undocumented, undocumented people, people without papers</i>",
  score: _scores.SCORES.NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmful,
  rule: (words, nonInclusivePhrase) => {
    return (0, _includesConsecutiveWords.includesConsecutiveWords)(words, nonInclusivePhrase).filter((0, _notInclusiveWhenStandalone.default)(words, nonInclusivePhrase));
  }
}, {
  identifier: "thePoor",
  nonInclusivePhrases: ["the poor"],
  inclusiveAlternatives: "<i>people whose income is below the poverty threshold, people with low-income</i>",
  score: _scores.SCORES.NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmful,
  rule: (words, nonInclusivePhrase) => {
    return (0, _includesConsecutiveWords.includesConsecutiveWords)(words, nonInclusivePhrase).filter((0, _notInclusiveWhenStandalone.default)(words, nonInclusivePhrase));
  }
}];
sesAssessments.forEach(assessment => {
  assessment.category = "ses";
  assessment.learnMoreUrl = "https://yoa.st/inclusive-language-ses";
});
var _default = exports.default = sesAssessments;
//# sourceMappingURL=sesAssessments.js.map