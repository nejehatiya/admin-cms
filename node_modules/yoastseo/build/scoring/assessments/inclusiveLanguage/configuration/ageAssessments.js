"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _feedbackStrings = require("./feedbackStrings");
var _isPrecededByException = require("../helpers/isPrecededByException");
var _isFollowedByException = require("../helpers/isFollowedByException");
var _includesConsecutiveWords = require("../helpers/includesConsecutiveWords");
var _scores = require("./scores");
var _notInclusiveWhenStandalone = _interopRequireDefault(require("../helpers/notInclusiveWhenStandalone"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
 * The last sentence of strings for the non-inclusive terms for 'older people/person'.
 *
 * "Or, if possible, be specific about the group you are referring to (e.g. %3$s)."
 */
const specificAgeGroup = "Or, if possible, be specific about the group you are referring to (e.g. %3$s).";
/*
 * Used to suggest an alternative for 'senile'.
 *
 * "Consider using an alternative, such as a specific characteristic or experience if it is known (e.g. <i>has Alzheimer's</i>)."
 */
const characteristicIfKnown = "Consider using an alternative, such as a specific characteristic or experience if it is known" + " (e.g. <i>has Alzheimer's</i>).";
const ageAssessments = [{
  identifier: "seniorCitizen",
  nonInclusivePhrases: ["senior citizen"],
  inclusiveAlternatives: ["<i>older person, older citizen</i>", "<i>person older than 70</i>"],
  score: _scores.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [_feedbackStrings.potentiallyHarmfulUnless, specificAgeGroup].join(" ")
}, {
  identifier: "seniorCitizens",
  nonInclusivePhrases: ["senior citizens"],
  inclusiveAlternatives: ["<i>older people, older citizens</i>", "<i>people older than 70</i>"],
  score: _scores.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [_feedbackStrings.potentiallyHarmfulUnless, specificAgeGroup].join(" ")
}, {
  identifier: "agingDependants",
  nonInclusivePhrases: ["aging dependants"],
  inclusiveAlternatives: ["<i>older people</i>", "<i>people older than 70</i>"],
  score: _scores.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [_feedbackStrings.potentiallyHarmfulUnless, specificAgeGroup].join(" ")
}, {
  identifier: "elderly",
  nonInclusivePhrases: ["elderly"],
  inclusiveAlternatives: ["<i>older people</i>", "<i>people older than 70</i>"],
  score: _scores.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [_feedbackStrings.potentiallyHarmfulUnless, specificAgeGroup].join(" ")
}, {
  identifier: "senile",
  nonInclusivePhrases: ["senile"],
  inclusiveAlternatives: "",
  score: _scores.SCORES.NON_INCLUSIVE,
  feedbackFormat: [_feedbackStrings.harmfulNonInclusive, characteristicIfKnown].join(" ")
}, {
  identifier: "senility",
  nonInclusivePhrases: ["senility"],
  inclusiveAlternatives: "<i>dementia</i>",
  score: _scores.SCORES.NON_INCLUSIVE,
  feedbackFormat: _feedbackStrings.potentiallyHarmful
}, {
  identifier: "seniors",
  nonInclusivePhrases: ["seniors"],
  inclusiveAlternatives: ["<i>older people</i>", "<i>people older than 70</i>"],
  score: _scores.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [_feedbackStrings.potentiallyHarmfulUnless, specificAgeGroup].join(" "),
  rule: (words, nonInclusivePhrase) => {
    return (0, _includesConsecutiveWords.includesConsecutiveWords)(words, nonInclusivePhrase).filter((0, _isPrecededByException.isNotPrecededByException)(words, ["high school", "college", "graduating", "juniors and"])).filter((0, _isFollowedByException.isNotFollowedByException)(words, nonInclusivePhrase, ["in high school", "in college", "who are graduating"]));
  }
}, {
  identifier: "theAged",
  nonInclusivePhrases: ["the aged"],
  inclusiveAlternatives: ["<i>older people</i>", "<i>people older than 70</i>"],
  score: _scores.SCORES.NON_INCLUSIVE,
  feedbackFormat: [_feedbackStrings.potentiallyHarmful, specificAgeGroup].join(" "),
  rule: (words, nonInclusivePhrase) => {
    return (0, _includesConsecutiveWords.includesConsecutiveWords)(words, nonInclusivePhrase).filter((0, _notInclusiveWhenStandalone.default)(words, nonInclusivePhrase));
  }
}];
ageAssessments.forEach(assessment => {
  assessment.category = "age";
  assessment.learnMoreUrl = "https://yoa.st/inclusive-language-age";
});
var _default = exports.default = ageAssessments;
//# sourceMappingURL=ageAssessments.js.map