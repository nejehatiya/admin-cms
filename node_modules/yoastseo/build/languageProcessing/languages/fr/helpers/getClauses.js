"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getFrenchClauses;
var _yoastseo = require("yoastseo");
var _Clause = _interopRequireDefault(require("../values/Clause"));
var _passiveVoiceAuxiliaries = _interopRequireDefault(require("../config/internal/passiveVoiceAuxiliaries.js"));
var _stopWords = _interopRequireDefault(require("../config/stopWords.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const {
  createRegexFromArray,
  getClauses
} = _yoastseo.languageProcessing;
const followingAuxiliaryExceptionWords = ["le", "la", "les", "une", "l'un", "l'une"];
const reflexivePronouns = ["se", "me", "te", "s'y", "m'y", "t'y", "nous nous", "vous vous"];
const elisionAuxiliaryExceptionWords = ["c'", "s'", "peut-"];
const options = {
  Clause: _Clause.default,
  stopwords: _stopWords.default,
  auxiliaries: _passiveVoiceAuxiliaries.default,
  regexes: {
    auxiliaryRegex: createRegexFromArray(_passiveVoiceAuxiliaries.default),
    stopCharacterRegex: /(,)(?=[ \n\r\t'"+\-»«‹›<>])/ig,
    followingAuxiliaryExceptionRegex: createRegexFromArray(followingAuxiliaryExceptionWords),
    directPrecedenceExceptionRegex: createRegexFromArray(reflexivePronouns),
    elisionAuxiliaryExceptionRegex: createRegexFromArray(elisionAuxiliaryExceptionWords, true)
  }
};

/**
 * Gets the clauses from a sentence by determining sentence breakers.
 *
 * @param {string} sentence The sentence to split up in clauses.
 *
 * @returns {Array} The array with all clauses that have an auxiliary.
 */
function getFrenchClauses(sentence) {
  return getClauses(sentence, options);
}
//# sourceMappingURL=getClauses.js.map