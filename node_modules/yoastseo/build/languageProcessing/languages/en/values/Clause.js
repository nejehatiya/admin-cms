"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lodash = require("lodash");
var _functionWords = require("../config/functionWords");
var _passiveVoiceNonVerbEndingEd = _interopRequireDefault(require("../config/internal/passiveVoiceNonVerbEndingEd"));
var _getParticiples = _interopRequireDefault(require("../helpers/internal/getParticiples"));
var _yoastseo = require("yoastseo");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const {
  precedenceException,
  directPrecedenceException,
  values
} = _yoastseo.languageProcessing;
const Clause = values.Clause;

/**
 * Creates a Clause object for the English language.
 */
class EnglishClause extends Clause {
  /**
   * Constructor.
   *
   * @param {string} clauseText   The text of the clause.
   * @param {Array} auxiliaries   The auxiliaries.
   *
   * @constructor
   */
  constructor(clauseText, auxiliaries) {
    super(clauseText, auxiliaries);
    this._participles = (0, _getParticiples.default)(this.getClauseText());
    this.checkParticiples();
  }

  /**
   * Checks if any exceptions are applicable to this participle that would result in the clause not being passive.
   * If no exceptions are found, the clause is passive.
   *
   * @returns {boolean} Returns true if no exception is found.
   */
  checkParticiples() {
    const clause = this.getClauseText();
    const passiveParticiples = this.getParticiples().filter(participle => !(0, _lodash.includes)(_passiveVoiceNonVerbEndingEd.default, participle) && !this.hasRidException(participle) && !directPrecedenceException(clause, participle, _functionWords.cannotDirectlyPrecedePassiveParticiple) && !precedenceException(clause, participle, _functionWords.cannotBeBetweenPassiveAuxiliaryAndParticiple));
    this.setPassive(passiveParticiples.length > 0);
  }

  /**
   * Checks whether the participle is 'rid' in combination with 'get', 'gets', 'getting', 'got' or 'gotten'.
   * If this is true, the participle is not passive.
   *
   * @param {string} participle   The participle
   *
   * @returns {boolean} Returns true if 'rid' is found in combination with a form of 'get'
   * otherwise returns false.
   */
  hasRidException(participle) {
    if (participle === "rid") {
      const irregularExclusionArray = ["get", "gets", "getting", "got", "gotten"];
      return !(0, _lodash.isEmpty)((0, _lodash.intersection)(irregularExclusionArray, this.getAuxiliaries()));
    }
    return false;
  }
}
var _default = exports.default = EnglishClause;
//# sourceMappingURL=Clause.js.map