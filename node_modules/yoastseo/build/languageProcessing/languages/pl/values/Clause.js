"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _getParticiples = _interopRequireDefault(require("../helpers/internal/getParticiples.js"));
var _yoastseo = require("yoastseo");
var _functionWords = require("../config/functionWords");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const {
  nonDirectPrecedenceException,
  directPrecedenceException,
  values
} = _yoastseo.languageProcessing;
const {
  Clause
} = values;
/**
 * Creates a Clause object for the Polish language.
 */
class PolishClause extends Clause {
  /**
   * Constructor.
   *
   * @param {string} clauseText   The text of the clause.
   * @param {Array} auxiliaries   The auxiliaries.
   *
   * @constructor
   */
  constructor(clauseText, auxiliaries) {
    super(clauseText, auxiliaries);
    this._participles = (0, _getParticiples.default)(this.getClauseText());
    this.checkParticiples();
  }

  /**
   * Checks if any exceptions are applicable to this participle that would result in the clause not being passive.
   * If no exceptions are found, the clause is passive.
   *
   * @returns {boolean} Returns true if no exception is found.
   */
  checkParticiples() {
    const clause = this.getClauseText();
    const auxiliaries = this.getAuxiliaries();
    const passiveParticiples = this.getParticiples().filter(participle => !directPrecedenceException(clause, participle, _functionWords.cannotDirectlyPrecedePassiveParticiple) && !nonDirectPrecedenceException(clause, participle, auxiliaries, _functionWords.cannotBeBetweenPassiveAuxiliaryAndParticiple));
    this.setPassive(passiveParticiples.length > 0);
  }
}
var _default = exports.default = PolishClause;
//# sourceMappingURL=Clause.js.map