"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _imageInText = require("../helpers/image/imageInText");
var _sanitizeLineBreakTag = _interopRequireDefault(require("../helpers/sanitize/sanitizeLineBreakTag"));
var _countWords = _interopRequireDefault(require("../helpers/word/countWords.js"));
var _matchParagraphs = _interopRequireDefault(require("../helpers/html/matchParagraphs.js"));
var _lodash = require("lodash");
var _htmlParser = _interopRequireDefault(require("../helpers/html/htmlParser"));
var _helpers = require("../helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Gets all paragraphs and their word counts or character counts from the text.
 *
 * @param {Paper} 		paper 		The paper object to get the text from.
 * @param {Researcher} 	researcher 	The researcher to use for analysis.
 *
 * @returns {Array} The array containing an object with the paragraph word or character count and paragraph text.
 */
function _default(paper, researcher) {
  let text = paper.getText();
  text = (0, _htmlParser.default)(text);
  text = (0, _helpers.filterShortcodesFromHTML)(text, paper._attributes && paper._attributes.shortcodes);

  // Remove images from text before retrieving the paragraphs.
  // This step is done here so that applying highlight in captions is possible for ParagraphTooLongAssessment.
  text = text.replace(_imageInText.imageRegex, "");

  // Replace line break tags containing attribute(s) with paragraph tag.
  text = (0, _sanitizeLineBreakTag.default)(text);
  const paragraphs = (0, _matchParagraphs.default)(text);
  const paragraphsLength = [];

  // An optional custom helper to count length to use instead of countWords.
  const customCountLength = researcher.getHelper("customCountLength");
  paragraphs.map(function (paragraph) {
    paragraphsLength.push({
      countLength: customCountLength ? customCountLength(paragraph) : (0, _countWords.default)(paragraph),
      text: paragraph
    });
  });
  return (0, _lodash.filter)(paragraphsLength, function (paragraphLength) {
    return paragraphLength.countLength > 0;
  });
}
//# sourceMappingURL=getParagraphLength.js.map