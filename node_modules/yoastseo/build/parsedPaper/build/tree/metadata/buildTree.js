"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _parseSynonyms = _interopRequireDefault(require("../../../../languageProcessing/helpers/sanitize/parseSynonyms"));
var _nodes = require("../../../structure/tree/nodes");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Parses the given paper attributes to a tree.
 *
 * @param {Paper} paper The Paper to parse.
 *
 * @memberOf module:parsedPaper/builder
 *
 * @returns {module:parsedPaper/structure.Node} The build tree.
 */
const buildTree = function buildTree(paper) {
  const metadata = new _nodes.StructuredNode("metadata", null);

  // Add text types.
  metadata.addChild(new _nodes.MetadataText("title", paper.getTitle()));
  metadata.addChild(new _nodes.MetadataText("description", paper.getDescription()));

  // Add miscellaneous types.
  metadata.addChild(new _nodes.MetadataMiscellaneous("keyphrase", paper.getKeyword()));
  metadata.addChild(new _nodes.MetadataMiscellaneous("synonyms", (0, _parseSynonyms.default)(paper.getSynonyms())));
  metadata.addChild(new _nodes.MetadataMiscellaneous("slug", paper.getSlug()));
  metadata.addChild(new _nodes.MetadataMiscellaneous("titleWidth", paper.getTitleWidth()));
  metadata.addChild(new _nodes.MetadataMiscellaneous("permalink", paper.getPermalink()));
  metadata.addChild(new _nodes.MetadataMiscellaneous("locale", paper.getLocale()));
  return metadata;
};
var _default = exports.default = buildTree;
//# sourceMappingURL=buildTree.js.map